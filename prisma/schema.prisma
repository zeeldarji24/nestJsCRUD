// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  isDeleted   Boolean    @default(false)
  permissions String[]
  employees   Employee[]
}

model Permission {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  action String
  roles  String[]
}

model Employee {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String           @unique
  age            Int
  gender         String
  salary         Int
  created        DateTime         @default(now())
  updated        DateTime         @updatedAt
  isDeleted      Boolean          @default(false)
  organizationId String?          @db.ObjectId
  roleId         String?          @db.ObjectId
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  role           Role?            @relation(fields: [roleId], references: [id])
  userCredential userCredential[]
  session        Session[]
}

model Organization {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  created   DateTime   @default(now())
  updated   DateTime   @updatedAt
  isDeleted Boolean    @default(false)
  employees Employee[]
}

model userCredential {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  empId     String?  @db.ObjectId
  password  String
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  isDeleted Boolean  @default(false)

  employee Employee? @relation(fields: [empId], references: [id])
}

model Session {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  empId     String    @db.ObjectId
  token     String
  loginAt   DateTime  @default(now())
  expireAt  DateTime
  expiredAt DateTime?
  created   DateTime  @default(now())
  updated   DateTime  @updatedAt
  isDeleted Boolean   @default(false)

  employee Employee @relation(fields: [empId], references: [id])
}
